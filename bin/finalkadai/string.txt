package finalkadai;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.GridLayout;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.Socket;
import java.time.LocalDate;
import java.time.YearMonth;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.swing.*;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;

public class ScheduleGUIClient extends JFrame {
    private final JPanel calendarPanel;
    private final JComboBox<String> monthComboBox;
    private final Map<String, Color> taskColorMap = new HashMap<>();
    private final Map<LocalDate, Map<String, Color>> scheduleMap = new HashMap<>();
    private final Map<LocalDate, Map<String, String[]>> scheduleDetails = new HashMap<>();
    private final Map<LocalDate, Map<String, int[]>> scheduleID = new HashMap<>();
    private int currentYear = LocalDate.now().getYear();
    private final DefaultListModel<String> taskListModel = new DefaultListModel<>();
    private LocalDate selectedDate;
    private Socket socket;
    private ObjectOutputStream oos;
    private ObjectInputStream ois;
    private int calendarID;
    private int calendarNum;

    public ScheduleGUIClient() {
        setTitle("Schedule Book");
        setSize(800, 600);
        setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
        
        setLayout(new BorderLayout());

        monthComboBox = new JComboBox<>(getMonths());
        monthComboBox.setSelectedIndex(LocalDate.now().getMonthValue() - 1);
        monthComboBox.addActionListener(e -> updateCalendar());
        add(monthComboBox, BorderLayout.NORTH);

        calendarPanel = new JPanel(new GridLayout(0, 7, 5, 5));
        calendarPanel.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));
        add(calendarPanel, BorderLayout.CENTER);

        updateCalendar();

        initializeConnection();

        new Thread(this::receiveFromServer).start();

        addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                int confirmed = JOptionPane.showConfirmDialog(null, 
                    "終了します。", "Exit Confirmation",
                    JOptionPane.YES_NO_OPTION);

                if (confirmed == JOptionPane.YES_OPTION) {
                    sendTaskToServer(null, null, null, null, null, 0, 0, "exit");
                    dispose(); // ウィンドウを閉じる
                }
            }
        });

        setVisible(true);
    }

    private String[] getMonths() {
        return new String[] { "1月", "2月", "3月", "4月", "5月", "6月", "7月", "8月", "9月", "10月", "11月", "12月" };
    }

    private void updateCalendar() {
        SwingUtilities.invokeLater(() -> {
            calendarPanel.removeAll();
            calendarPanel.setLayout(new GridLayout(0, 7, 5, 5));

            String[] daysOfWeek = { "日", "月", "火", "水", "木", "金", "土" };
            for (int i = 0; i < daysOfWeek.length; i++) {
                JLabel dayLabel = new JLabel(daysOfWeek[i], SwingConstants.CENTER);
                dayLabel.setOpaque(true);
                dayLabel.setFont(dayLabel.getFont().deriveFont(16.0f));
                if (i == 6) {
                    dayLabel.setBackground(Color.LIGHT_GRAY);
                    dayLabel.setForeground(Color.BLUE);
                } else if (i == 0) {
                    dayLabel.setBackground(Color.LIGHT_GRAY);
                    dayLabel.setForeground(Color.RED);
                } else {
                    dayLabel.setBackground(Color.LIGHT_GRAY);
                }
                dayLabel.setBorder(BorderFactory.createLineBorder(Color.BLACK));
                calendarPanel.add(dayLabel);
            }

            YearMonth yearMonth = YearMonth.of(currentYear, monthComboBox.getSelectedIndex() + 1);
            LocalDate firstOfMonth = yearMonth.atDay(1);
            int daysInMonth = yearMonth.lengthOfMonth();
            LocalDate today = LocalDate.now();

            Color lightRedColor = new Color(255, 208, 208);
            int startDayOfWeek = firstOfMonth.getDayOfWeek().getValue();
            if (startDayOfWeek == 7) {
                startDayOfWeek = 0;
            }

            for (int i = 0; i < startDayOfWeek; i++) {
                calendarPanel.add(new JPanel());
            }

            for (int day = 1; day <= daysInMonth; day++) {
                LocalDate date = LocalDate.of(currentYear, monthComboBox.getSelectedIndex() + 1, day);
                JPanel dayPanel = new JPanel();
                dayPanel.setLayout(new BoxLayout(dayPanel, BoxLayout.Y_AXIS));
                dayPanel.setBorder(BorderFactory.createLineBorder(Color.BLACK));
                if (date.equals(today)) {
                    dayPanel.setBackground(lightRedColor);
                } else {
                    dayPanel.setBackground(Color.WHITE);
                }

                JLabel dateLabel = new JLabel(Integer.toString(day));
                dateLabel.setHorizontalAlignment(JLabel.CENTER);
                int dayOfWeek = date.getDayOfWeek().getValue();
                if (dayOfWeek == 6) {
                    dateLabel.setForeground(Color.BLUE);
                } else if (dayOfWeek == 7 || dayOfWeek == 0) {
                    dateLabel.setForeground(Color.RED);
                } else {
                    dateLabel.setForeground(Color.BLACK);
                }

                dayPanel.add(dateLabel);

                Map<String, Color> tasks = scheduleMap.getOrDefault(date, new HashMap<>());
                for (Map.Entry<String, Color> taskEntry : tasks.entrySet()) {
                    JLabel taskLabel = createTaskLabel(taskEntry, date);
                    dayPanel.add(taskLabel);
                }

                dayPanel.addMouseListener(new MouseAdapter() {
                    @Override
                    public void mouseClicked(MouseEvent e) {
                        selectedDate = date;
                        if (SwingUtilities.isLeftMouseButton(e)) {
                            e.consume();
                            showTaskDialog();
                        }
                    }
                });

                calendarPanel.add(dayPanel);
            }

            calendarPanel.revalidate();
            calendarPanel.repaint();
        });
    }

    private JLabel createTaskLabel(Map.Entry<String, Color> taskEntry, LocalDate date) {
        Map<String, String[]> detailsMap = scheduleDetails.computeIfAbsent(date, k -> new HashMap<>());
        Map<String, int[]> mapID = scheduleID.computeIfAbsent(date, k -> new HashMap<>());
        String[] details = detailsMap.get(taskEntry.getKey());
        if (details == null) {
            details = new String[]{"不明なユーザー", "詳細なし"};
        }
        JLabel taskLabel = new JLabel(details[0] + ": " + taskEntry.getKey(), SwingConstants.CENTER);
        taskLabel.setOpaque(true);
        taskLabel.setForeground(Color.WHITE);
        taskLabel.setBackground(taskEntry.getValue());
        taskLabel.setBorder(BorderFactory.createEmptyBorder(2, 5, 2, 5));
        taskLabel.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                if (SwingUtilities.isLeftMouseButton(e)) {
                    e.consume();
                    showEditTaskDialog(taskEntry, date, detailsMap, mapID);
                }
            }
        });
        return taskLabel;
    }

    private void showTaskDialog() {
        List<Object> options = new ArrayList<>(Arrays.asList(taskListModel.toArray()));
        String addNewTaskOption = "新しいタスクを追加...";
        options.add(addNewTaskOption);

        String selectedTask = (String) JOptionPane.showInputDialog(
                this,
                "予定を選択するか、新しい予定を追加してください:",
                "予定の追加/編集",
                JOptionPane.PLAIN_MESSAGE,
                null,
                options.toArray(),
                null);
        String userName = null;
        String taskDetails = null;

        if (addNewTaskOption.equals(selectedTask)) {
            JTextField taskNameField = new JTextField();
            JTextField userNameField = new JTextField();
            JTextArea taskDetailsArea = new JTextArea(3, 20);
            taskDetailsArea.setLineWrap(true);
            taskDetailsArea.setWrapStyleWord(true);

            JPanel panel = new JPanel(new BorderLayout());

            JPanel userPanel = new JPanel(new BorderLayout());
            userPanel.add(new JLabel("ユーザー名:"), BorderLayout.NORTH);
            userPanel.add(userNameField, BorderLayout.CENTER);

            JPanel taskPanel = new JPanel(new BorderLayout());
            taskPanel.add(new JLabel("タスク名:"), BorderLayout.NORTH);
            taskPanel.add(taskNameField, BorderLayout.CENTER);

            JPanel detailsPanel = new JPanel(new BorderLayout());
            detailsPanel.add(new JLabel("詳細:"), BorderLayout.NORTH);
            detailsPanel.add(new JScrollPane(taskDetailsArea), BorderLayout.CENTER);

            panel.add(userPanel, BorderLayout.NORTH);
            panel.add(taskPanel, BorderLayout.CENTER);
            panel.add(detailsPanel, BorderLayout.SOUTH);

            int option = JOptionPane.showConfirmDialog(
                    this,
                    panel,
                    "新しいタスクを入力してください",
                    JOptionPane.OK_CANCEL_OPTION,
                    JOptionPane.PLAIN_MESSAGE);

            if (option == JOptionPane.OK_OPTION) {
                String taskName = taskNameField.getText().trim();
                userName = userNameField.getText().trim();
                taskDetails = taskDetailsArea.getText().trim();
                calendarNum++;

                if (!taskName.isEmpty() && !userName.isEmpty()) {
                    taskListModel.addElement(taskName);
                    selectedTask = taskName;
                    scheduleDetails.computeIfAbsent(selectedDate, k -> new HashMap<>()).put(taskName,new String[] { userName, taskDetails });
                    scheduleID.computeIfAbsent(selectedDate, k-> new HashMap<>()).put(taskName, new int[]{calendarID, calendarNum});
                }
            }
        }

        if (selectedTask != null && !selectedTask.trim().isEmpty() && !addNewTaskOption.equals(selectedTask)) {
            Color taskColor = taskColorMap.computeIfAbsent(selectedTask, k -> JColorChooser.showDialog(
                    this,
                    "カラーの選択",
                    Color.WHITE));

            scheduleMap.computeIfAbsent(selectedDate, k -> new HashMap<>()).put(selectedTask, taskColor);
            updateCalendar();
            sendTaskToServer(selectedDate.toString(), userName, selectedTask, taskColor, taskDetails, calendarID, calendarNum, "add");
        }
    }

    private void showEditTaskDialog(Map.Entry<String, Color> taskEntry, LocalDate date, Map<String, String[]> detailsMap, Map<String, int[]> taskInt) {
        String[] detailArray = detailsMap.get(taskEntry.getKey());
        int[] taskID = taskInt.get(taskEntry.getKey());
        if (detailArray == null) {
            detailArray = new String[]{"不明なユーザー", "詳細なし"};
        }

        JTextArea detailsArea = new JTextArea(detailArray[1]);
        detailsArea.setRows(10);
        detailsArea.setColumns(30);
        JScrollPane scrollPane = new JScrollPane(detailsArea);
        JTextField taskNameField = new JTextField(taskEntry.getKey());
        JTextField userNameField = new JTextField(detailArray[0]);
        Object[] message = {
                "ユーザー名:", userNameField,
                "予定名:", taskNameField,
                "予定の詳細:", scrollPane
        };
        int action = JOptionPane.showOptionDialog(
                this,
                message,
                "予定の編集: " + taskEntry.getKey(),
                JOptionPane.DEFAULT_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                null,
                new String[] { "保存", "削除", "キャンセル", "色変更" },
                "保存");

        switch (action) {
            case 0: // 保存
                String userName = userNameField.getText().trim();
                String newTaskName = taskNameField.getText().trim();
                String newDetails = detailsArea.getText();
                String[] newDetailArray = new String[]{userName, newDetails};
                int calendarID = taskID[0];
                int calendarNum = taskID[1];
                if (!newTaskName.isEmpty() && !newTaskName.equals(taskEntry.getKey())) {
                    Color color = scheduleMap.get(date).remove(taskEntry.getKey());
                    scheduleMap.get(date).put(newTaskName, color);
                    detailsMap.remove(taskEntry.getKey());
                    detailsMap.put(newTaskName, newDetailArray);
                    taskInt.remove(taskEntry.getKey());
                    taskInt.put(newTaskName, new int[]{calendarID, calendarNum});
                    sendTaskToServer(date.toString(), userName, newTaskName, color, newDetails, calendarID, calendarNum, "save");
                    taskListModel.removeElement(taskEntry.getKey());
                    taskListModel.addElement(newTaskName);
                } else {
                    detailsMap.put(taskEntry.getKey(), newDetailArray);
                    sendTaskToServer(date.toString(), userName, taskEntry.getKey(), taskEntry.getValue(), newDetails, calendarID, calendarNum, "save");
                }
                break;
            case 1: // 削除
                scheduleMap.get(date).remove(taskEntry.getKey());
                detailsMap.remove(taskEntry.getKey());
                taskInt.remove(taskEntry.getKey());
                sendTaskToServer(date.toString(), detailArray[0], taskEntry.getKey(), taskEntry.getValue(), detailArray[1], taskID[0], taskID[1],"delete");
                taskListModel.removeElement(taskEntry.getKey());
                break;
            case 2: // キャンセル
                // 何もしない
                break;
            case 3: // 色変更
                Color newColor = JColorChooser.showDialog(this, "色を選択",
                        scheduleMap.get(date).getOrDefault(taskEntry.getKey(), Color.WHITE));
                if (newColor != null) {
                    //scheduleMap.get(date).put(taskEntry.getKey(), newColor);
                    sendTaskToServer(date.toString(), detailArray[0], taskEntry.getKey(), newColor, detailArray[1], taskID[0], taskID[1], "change");
                }
                break;
        }
        updateCalendar();
    }

    private void sendTaskToServer(String date, String name, String task, Color color, String detail, int calendarID, int calendarNum, String method) {
        try {
            TerminalInput input = new TerminalInput();
            input.setDate(date);
            input.setName(name);
            input.setTask(task);
            if (color != null) {
                input.setRgba(ColorExtractor(color.toString()));
            }
            input.setDetail(detail);
            input.setCalendarID(calendarID);
            input.setCalendarNum(calendarNum);
            input.setMethod(method);
            oos.writeObject(input);
            oos.flush();
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "サーバへの接続に失敗しました。", "エラー", JOptionPane.ERROR_MESSAGE);
        }
    }

    @SuppressWarnings("unchecked")
private void receiveFromServer() {
    try {
        calendarID = ois.readInt();
        while (true) {
            Object inputObject = ois.readObject();
            System.out.println(inputObject.toString());
            if (inputObject instanceof String && "exit".equals(inputObject.toString())) {
                break;
            }

            if (inputObject instanceof List<?>) {
                List<?> tempList = (List<?>) inputObject;
                boolean isValid = true;
                for (Object obj : tempList) {
                    if (!(obj instanceof TerminalInput)) {
                        isValid = false;
                        break;
                    }
                }
                if (isValid) {
                    List<TerminalInput> dataList = (List<TerminalInput>) tempList;
                    System.out.println("bbbb");
                    scheduleMap.clear();
                    scheduleDetails.clear();
                    scheduleID.clear();
                    taskListModel.clear();

                    for (TerminalInput input : dataList) {
                        String date = input.getDate();
                        String name = input.getName();
                        String task = input.getTask();
                        String[] rgba = input.getRgba();
                        String detail = input.getDetail();
                        int id = input.getCalendarID();
                        int num = input.getCalendarNum();

                        if (date != null && task != null && rgba != null) {
                            Color color = new Color(Integer.parseInt(rgba[0]), Integer.parseInt(rgba[1]),
                                    Integer.parseInt(rgba[2]));
                            LocalDate localDate = LocalDate.parse(date);

                            scheduleMap.computeIfAbsent(localDate, k -> new HashMap<>()).put(task, color);
                            scheduleDetails.computeIfAbsent(localDate, k -> new HashMap<>()).put(task, new String[]{name, detail});
                            scheduleID.computeIfAbsent(localDate, k -> new HashMap<>()).put(task, new int[]{id, num});
                            taskListModel.addElement(task);
                        }
                    }
                    System.out.println("cccc");
                    updateCalendar();
                    System.out.println("ddddd");
                } else {
                    System.err.println("Unexpected list contents: " + tempList);
                }
            } else {
                System.err.println("Unexpected input: " + inputObject);
            }
            System.out.println("sssss");
        }
        ois.close();
        socket.close();
    } catch (Exception e) {
        e.printStackTrace();
    }
}


    private void initializeConnection() {
        try {
            System.out.print("ポートを入力してください(5000など) → ");
            int port = 5000;
            System.out.println("localhostの" + port + "番ポートに接続を要求します");
            socket = new Socket("localhost", port);
            System.out.println("接続されました");

            oos = new ObjectOutputStream(socket.getOutputStream());
            ois = new ObjectInputStream(socket.getInputStream());
        } catch (Exception e) {
            e.printStackTrace();
            System.err.println("サーバへの接続に失敗しました。");
        }
    }

    public static String[] ColorExtractor(String str) {
        Pattern pattern = Pattern.compile("\\d+");
        Matcher matcher = pattern.matcher(str);

        List<Integer> list = new ArrayList<>();
        while (matcher.find()) {
            list.add(Integer.parseInt(matcher.group()));
        }

        String[] result = new String[3];
        for (int i = 0; i < list.size(); i++) {
            result[i] = list.get(i).toString();
        }
        return result;
    }

    public static void main(String[] args) {
        ScheduleGUIClient scheduleGUIClient = new ScheduleGUIClient();
        scheduleGUIClient.setVisible(true);
    }
}
